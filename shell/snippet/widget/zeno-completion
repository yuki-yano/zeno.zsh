#autoload

emulate -L zsh

local callback callback_zero cmdline expect_key options source_command
local -a out

# ${(f)...} : split by new-line (\n)
out=( "${(f)$(zeno-call-client-and-fallback --zeno-mode=completion \
  --input.lbuffer="$LBUFFER" \
  --input.rbuffer="$RBUFFER" \
  )}" )

if [[ $out[1] != success ]]; then
  zle ${ZENO_COMPLETION_FALLBACK:-${${functions[fzf-completion]+fzf-completion}:-expand-or-complete}}
  return
fi

source_command=$out[2]
options=$out[3]
callback=$out[4]
callback_zero=$out[5]

options="${ZENO_ENABLE_FZF_TMUX:+${ZENO_FZF_TMUX_OPTIONS}} $options"
cmdline="${source_command} | ${ZENO_FZF_COMMAND} ${options}"

# ${(0)...} : split by null (\0)
out=( "${(0)$(eval $cmdline)}" )

expect_key=$out[1]
shift out

# remove empty items
out=( ${(@)out:#} )

# filter output with callback
if [[ $callback && $out ]]; then
  if [[ $callback_zero ]]; then
    # divide input and output by null (\0)
    out=( "${(0)$(printf '%s\0' ${(@)out} | eval $callback)}" )
  else
    # divide input and output by new-line (\n)
    out=( "${(f)$(printf '%s\n' ${(@)out} | eval $callback)}" )
  fi

  # remove empty items
  out=( ${(@)out:#} )
fi

# update buffer if result is not empty
if [[ $out ]]; then
  # ${(@q)...} : quote each items
  LBUFFER+=${(@q)out}

  zle zeno-snippet-next-placeholder
fi

zle reset-prompt
